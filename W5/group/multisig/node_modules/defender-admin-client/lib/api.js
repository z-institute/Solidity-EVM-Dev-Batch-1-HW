"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminClient = void 0;
const defender_base_client_1 = require("defender-base-client");
const lodash_1 = require("lodash");
const utils_1 = require("./utils");
class AdminClient extends defender_base_client_1.BaseApiClient {
    getPoolId() {
        return process.env.DEFENDER_ADMIN_POOL_ID || 'us-west-2_94f3puJWv';
    }
    getPoolClientId() {
        return process.env.DEFENDER_ADMIN_POOL_CLIENT_ID || '40e58hbc7pktmnp9i26hh5nsav';
    }
    getApiUrl() {
        return process.env.DEFENDER_ADMIN_API_URL || 'https://defender-api.openzeppelin.com/admin/';
    }
    async addContract(contract) {
        return this.apiCall(async (api) => {
            return (await api.put('/contracts', contract));
        });
    }
    async listContracts() {
        return this.apiCall(async (api) => {
            return (await api.get('/contracts'));
        });
    }
    async createProposal(proposal) {
        return this.apiCall(async (api) => {
            const response = (await api.post('/proposals', proposal));
            return { ...response, url: utils_1.getProposalUrl(response) };
        });
    }
    async proposeUpgrade(params, contract) {
        var _a, _b;
        const request = {
            contract,
            type: 'upgrade',
            metadata: {
                newImplementationAddress: params.newImplementation,
                proxyAdminAddress: params.proxyAdmin,
            },
            title: (_a = params.title) !== null && _a !== void 0 ? _a : `Upgrade to ${params.newImplementation.slice(0, 10)}`,
            description: (_b = params.description) !== null && _b !== void 0 ? _b : `Upgrade contract implementation to ${params.newImplementation}`,
            via: params.via,
            viaType: params.viaType,
        };
        return this.createProposal(request);
    }
    async proposePause(params, contract) {
        return this.proposePauseabilityAction(params, contract, 'pause');
    }
    async proposeUnpause(params, contract) {
        return this.proposePauseabilityAction(params, contract, 'unpause');
    }
    async proposePauseabilityAction(params, contract, action) {
        var _a, _b;
        const request = {
            contract,
            type: 'pause',
            via: params.via,
            viaType: params.viaType,
            metadata: {
                action,
            },
            title: (_a = params.title) !== null && _a !== void 0 ? _a : `${lodash_1.capitalize(action)} contract`,
            description: (_b = params.description) !== null && _b !== void 0 ? _b : `${lodash_1.capitalize(action)} contract`,
        };
        return this.createProposal(request);
    }
}
exports.AdminClient = AdminClient;
