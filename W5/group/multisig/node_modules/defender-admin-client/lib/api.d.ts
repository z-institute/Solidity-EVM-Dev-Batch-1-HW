import { BaseApiClient } from 'defender-base-client';
import { Address, ExternalApiCreateProposalRequest as CreateProposalRequest } from './models/proposal';
import { Contract } from './models/contract';
import { ExternalApiProposalResponse as ProposalResponse } from './models/response';
declare type UpgradeParams = {
    title?: string;
    description?: string;
    proxyAdmin?: string;
    via?: Address;
    viaType?: 'EOA' | 'Gnosis Safe' | 'Gnosis Multisig';
    newImplementation: string;
};
declare type PauseParams = {
    title?: string;
    description?: string;
    via: Address;
    viaType: 'EOA' | 'Gnosis Safe' | 'Gnosis Multisig';
};
export interface ProposalResponseWithUrl extends ProposalResponse {
    url: string;
}
export declare class AdminClient extends BaseApiClient {
    protected getPoolId(): string;
    protected getPoolClientId(): string;
    protected getApiUrl(): string;
    addContract(contract: Contract): Promise<Contract>;
    listContracts(): Promise<Contract[]>;
    createProposal(proposal: CreateProposalRequest): Promise<ProposalResponseWithUrl>;
    proposeUpgrade(params: UpgradeParams, contract: CreateProposalRequest['contract']): Promise<ProposalResponseWithUrl>;
    proposePause(params: PauseParams, contract: CreateProposalRequest['contract']): Promise<ProposalResponseWithUrl>;
    proposeUnpause(params: PauseParams, contract: CreateProposalRequest['contract']): Promise<ProposalResponseWithUrl>;
    private proposePauseabilityAction;
}
export {};
//# sourceMappingURL=api.d.ts.map