"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeProposeUpgrade = void 0;
require("@openzeppelin/hardhat-upgrades/dist/type-extensions");
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const defender_admin_client_1 = require("defender-admin-client");
const utils_1 = require("ethers/lib/utils");
const defender_base_client_1 = require("defender-base-client");
function makeProposeUpgrade(hre) {
    return async function proposeUpgrade(proxyAddress, ImplFactory, opts = {}) {
        if (!hre.config.defender) {
            throw new Error(`Missing Defender API key and secret in hardhat config`);
        }
        const client = new defender_admin_client_1.AdminClient(hre.config.defender);
        const chainId = await (0, upgrades_core_1.getChainId)(hre.network.provider);
        const network = (0, defender_base_client_1.fromChainId)(chainId);
        if (network === undefined) {
            throw new Error(`Network ${chainId} is not supported in Defender Admin`);
        }
        const { title, description, proxyAdmin, multisig, multisigType, ...moreOpts } = opts;
        if (await (0, upgrades_core_1.isBeaconProxy)(hre.network.provider, proxyAddress)) {
            throw new Error(`Beacon proxy is not currently supported with defender.proposeUpgrade()`);
        }
        else if (await (0, upgrades_core_1.isBeacon)(hre.network.provider, proxyAddress)) {
            throw new Error(`Beacon is not currently supported with defender.proposeUpgrade()`);
        }
        else {
            // try getting the implementation address so that it will give an error if it's not a transparent/uups proxy
            await (0, upgrades_core_1.getImplementationAddress)(hre.network.provider, proxyAddress);
        }
        const newImplementation = await hre.upgrades.prepareUpgrade(proxyAddress, ImplFactory, moreOpts);
        const contract = { address: proxyAddress, network, abi: ImplFactory.interface.format(utils_1.FormatTypes.json) };
        return client.proposeUpgrade({
            newImplementation,
            title,
            description,
            proxyAdmin,
            via: multisig,
            viaType: multisigType,
        }, contract);
    };
}
exports.makeProposeUpgrade = makeProposeUpgrade;
//# sourceMappingURL=propose-upgrade.js.map