/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITokenApproval} proto.ITokenApproval
 * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
 * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
 */
/**
 * @typedef {import("bignumber.js").default} BigNumber
 * @typedef {import("long")} Long
 */
export default class TokenApproval {
    /**
     * @internal
     * @param {proto.ITokenApproval} approval
     * @returns {TokenApproval}
     */
    static _fromProtobuf(approval: proto.ITokenApproval): TokenApproval;
    /**
     * @internal
     * @param {object} props
     * @param {TokenId | string} props.tokenId
     * @param {AccountId | string} props.spenderAccountId
     * @param {Long | null} props.amount
     */
    constructor(props: {
        tokenId: TokenId | string;
        spenderAccountId: AccountId | string;
        amount: Long | null;
    });
    /**
     * The token that the allowance pertains to.
     *
     * @readonly
     */
    readonly tokenId: TokenId;
    /**
     * The account ID of the spender of the hbar allowance.
     *
     * @readonly
     */
    readonly spenderAccountId: AccountId;
    /**
     * The amount of the spender's token allowance.
     *
     * **NOTE**: If `null`, the spender has access to all of the account owner's NFT instances
     * (currently owned and any in the future).
     *
     * @readonly
     */
    readonly amount: import("long").Long | null;
    /**
     * @internal
     * @returns {proto.ITokenApproval}
     */
    _toProtobuf(): proto.ITokenApproval;
}
export namespace proto {
    type ITokenApproval = import("@hashgraph/proto").ITokenApproval;
    type IAccountID = import("@hashgraph/proto").IAccountID;
    type ITokenID = import("@hashgraph/proto").ITokenID;
}
export type BigNumber = import("bignumber.js").default;
export type Long = import("long");
import TokenId from "../token/TokenId.js";
import AccountId from "./AccountId.js";
