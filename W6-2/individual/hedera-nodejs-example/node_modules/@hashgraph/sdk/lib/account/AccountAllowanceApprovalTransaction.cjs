"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transaction = _interopRequireWildcard(require("../transaction/Transaction.cjs"));

var _AccountId = _interopRequireDefault(require("./AccountId.cjs"));

var _TokenId = _interopRequireDefault(require("../token/TokenId.cjs"));

var _HbarApproval = _interopRequireDefault(require("./HbarApproval.cjs"));

var _TokenApproval = _interopRequireDefault(require("./TokenApproval.cjs"));

var _long = _interopRequireDefault(require("long"));

var _Hbar = _interopRequireDefault(require("../Hbar.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
 * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
 * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").ICryptoApproveAllowanceTransactionBody} proto.ICryptoApproveAllowanceTransactionBody
 * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
 */

/**
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../client/Client.js").default<*, *>} Client
 * @typedef {import("../transaction/TransactionId.js").default} TransactionId
 * @typedef {import("bignumber.js").default} BigNumber
 * @typedef {import("../long.js").LongObject} LongObject
 */

/**
 * Change properties for the given account.
 */
class AccountAllowanceApprovalTransaction extends _Transaction.default {
  /**
   * @param {object} [props]
   * @param {HbarApproval[]} [props.hbarApprovals]
   * @param {TokenApproval[]} [props.tokenApprovals]
   */
  constructor(props = {}) {
    super();
    /**
     * @private
     * @type {HbarApproval[]}
     */

    this._hbarApprovals = props.hbarApprovals != null ? props.hbarApprovals : [];
    /**
     * @private
     * @type {TokenApproval[]}
     */

    this._tokenApprovals = props.tokenApprovals != null ? props.tokenApprovals : [];
  }
  /**
   * @internal
   * @param {proto.ITransaction[]} transactions
   * @param {proto.ISignedTransaction[]} signedTransactions
   * @param {TransactionId[]} transactionIds
   * @param {AccountId[]} nodeIds
   * @param {proto.ITransactionBody[]} bodies
   * @returns {AccountAllowanceApprovalTransaction}
   */


  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {
    const body = bodies[0];
    const allowanceApproval =
    /** @type {proto.ICryptoApproveAllowanceTransactionBody} */
    body.cryptoApproveAllowance;
    return _Transaction.default._fromProtobufTransactions(new AccountAllowanceApprovalTransaction({
      hbarApprovals: (allowanceApproval.cryptoApproval != null ? allowanceApproval.cryptoApproval : []).map(approval => _HbarApproval.default._fromProtobuf(approval)),
      tokenApprovals: (allowanceApproval.tokenApproval != null ? allowanceApproval.tokenApproval : []).map(approval => _TokenApproval.default._fromProtobuf(approval))
    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);
  }
  /**
   * @returns {HbarApproval[]}
   */


  get hbarApprovals() {
    return this._hbarApprovals;
  }
  /**
   * @internal
   * @param {AccountId | string} spenderAccountId
   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount
   * @returns {AccountAllowanceApprovalTransaction}
   */


  addHbarApproval(spenderAccountId, amount) {
    this._requireNotFrozen();

    this._hbarApprovals.push(new _HbarApproval.default({
      spenderAccountId: typeof spenderAccountId === "string" ? _AccountId.default.fromString(spenderAccountId) : spenderAccountId,
      amount: amount instanceof _Hbar.default ? amount : new _Hbar.default(amount)
    }));

    return this;
  }
  /**
   * @returns {TokenApproval[]}
   */


  get tokenApprovals() {
    return this._tokenApprovals;
  }
  /**
   * @internal
   * @param {TokenId | string} tokenId
   * @param {AccountId | string} spenderAccountId
   * @param {Long | number} amount
   * @returns {AccountAllowanceApprovalTransaction}
   */


  addTokenApproval(tokenId, spenderAccountId, amount) {
    this._requireNotFrozen();

    this._tokenApprovals.push(new _TokenApproval.default({
      tokenId: typeof tokenId === "string" ? _TokenId.default.fromString(tokenId) : tokenId,
      spenderAccountId: typeof spenderAccountId === "string" ? _AccountId.default.fromString(spenderAccountId) : spenderAccountId,
      amount: typeof amount === "number" ? _long.default.fromNumber(amount) : amount
    }));

    return this;
  }
  /**
   * @param {Client} client
   */


  _validateChecksums(client) {
    this._hbarApprovals.map(approval => approval.spenderAccountId.validateChecksum(client));

    this._tokenApprovals.map(approval => {
      approval.tokenId.validateChecksum(client);
      approval.spenderAccountId.validateChecksum(client);
    });
  }
  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {proto.ITransaction} request
   * @returns {Promise<proto.ITransactionResponse>}
   */


  _execute(channel, request) {
    return channel.crypto.approveAllowances(request);
  }
  /**
   * @override
   * @protected
   * @returns {NonNullable<proto.TransactionBody["data"]>}
   */


  _getTransactionDataCase() {
    return "cryptoApproveAllowance";
  }
  /**
   * @override
   * @protected
   * @returns {proto.ICryptoApproveAllowanceTransactionBody}
   */


  _makeTransactionData() {
    return {
      cryptoApproval: this._hbarApprovals.map(approval => approval._toProtobuf()),
      tokenApproval: this._tokenApprovals.map(approval => approval._toProtobuf())
    };
  }

}

exports.default = AccountAllowanceApprovalTransaction;

_Transaction.TRANSACTION_REGISTRY.set("cryptoApproveAllowance", // eslint-disable-next-line @typescript-eslint/unbound-method
AccountAllowanceApprovalTransaction._fromProtobuf);